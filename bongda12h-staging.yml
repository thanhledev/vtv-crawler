version: '3.8'

networks:
  rest:
  db:

volumes:
  mongodb-vol:


services:
  mongodb:
    image: mongo
    container_name: mongodb
    volumes:
      - mongodb-vol:/data/db
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet 
      interval: 10s
      timeout: 10s
      retries: 3 

  mongo-express:
    image: mongo-express
    container_name: mexpress
    networks:
      - db
    env_file:
      - ./.staging.env
    depends_on:
      mongodb:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.rule=Host(`express.bongda12h.test`)"
      - "traefik.http.routers.mongo-express.middlewares=transparent@file"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"

  vtv_crawler:
    image: vtv-scrapy
    container_name: vtv_crawler
    build:
      context: ./vtv-scrapy
      dockerfile: vtv-scrapy.Dockerfile
    env_file:
      - ./.staging.env
    networks:
      - db
    depends_on:
      mongodb:
        condition: service_healthy

  vtv_backend:
    image: vtv-fastapi
    container_name: vtv_backend
    build:
      context: ./crawler-backend
      dockerfile: vtv-fastapi.Dockerfile
    env_file:
      - ./.staging.env
    networks:
      - db
      - rest
    depends_on:
      mongodb:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.bongda12h.test`)"
      #- "traefik.http.routers.backend.middlewares=testheader"
      #- "traefik.http.middlewares.testheader.headers.customResponseHeaders.accesscontrolallowmethods=*"
      #- "traefik.http.middlewares.testheader.headers.customResponseHeaders.accesscontrolallowheaders=*"
      #- "traefik.http.middlewares.testheader.headers.customResponseHeaders.accesscontrolalloworiginlist=http://bongda12h.test"
      #- "traefik.http.middlewares.testheader.headers.customResponseHeaders.accesscontrolmaxage=100"
      #- "traefik.http.middlewares.testheader.headers.customResponseHeaders.addvaryheader=true"
      - "traefik.http.routers.backend.middlewares=cors@file"
      #- "traefik.http.routers.backend.middlewares=backendcors@file"
      - "traefik.http.services.backend.loadbalancer.server.port=8888"

  vtv_frontend:
    image: vtv-vue3
    container_name: vtv_frontend
    build:
      context: ./crawler-frontend
      dockerfile: vtv-vue3.Dockerfile
      args:
        VUE_MODE: staging
    networks:
      - rest
    depends_on:
      vtv_backend:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`bongda12h.test`)"
      - "traefik.http.routers.frontend.middlewares=transparent@file"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"

  traefik:
    image: traefik:2.5
    container_name: traefik
    restart: on-failure:5
    environment:
      - TZ=${TIME_ZONE:-Europe/Berlin}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./proxy/config/:/etc/traefik/
    networks:
      - rest
      - db
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "2"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.bongda12h.test`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=test:$$2y$$10$$GyfAMSUq6NE0Kh4tPP2Klec9GCsUAv5adXH4Fni0dPDagFoBWl7Ca"

